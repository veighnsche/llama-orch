# llama-orch Workspace
#
# This workspace contains all crates that make up the llama-orch distributed inference system.
# Organized by purpose with inline descriptions for easy navigation.

[workspace]
members = [
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # CONTRACTS — Shared Types & Schemas
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # API types and configuration schemas shared across all services.
    
    "contracts/api-types",        # API request/response types
    "contracts/config-schema",    # Configuration validation & schemas

    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # MAIN SERVICES — Core Binaries
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # The three main services that form the distributed inference system.
    
    "bin/orchestratord",          # Orchestrator: admission, scheduling, job dispatch
    "bin/orchestratord/bdd",
    
    "bin/pool-managerd",          # Pool manager: worker lifecycle, GPU inventory, model provisioning
    "bin/pool-managerd/bdd",
    
    "bin/worker-orcd",            # Worker: inference execution, model loading, streaming
    "bin/worker-orcd/bdd",

    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # SHARED CRATES — Cross-Service Utilities
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # Common libraries used across multiple services.
    
    "bin/shared-crates/audit-logging",         # Structured audit logs for security & compliance
    "bin/shared-crates/audit-logging/bdd",     # Vigilant, uncompromising, deeply paranoid (in a good way)
    
    "bin/shared-crates/auth-min",              # Minimal authentication (bearer tokens, HMAC)
                                               # Invisible, uncompromising, always watching
    
    "bin/shared-crates/deadline-propagation",  # Request deadline tracking
                                               # Relentlessly efficient, zero-tolerance for latency waste
    
    "bin/shared-crates/gpu-info",              # GPU detection & capability queries
    
    "bin/shared-crates/input-validation",      # Input sanitization & validation
    "bin/shared-crates/input-validation/bdd",
    
    "bin/shared-crates/narration-core",        # Human-readable narration (human/cute/story modes)
    "bin/shared-crates/narration-core/bdd",    # The cutest observability team in the monorepo! 💕
    "bin/shared-crates/narration-macros",      # Proc macros for narration (compile-time magic)
    
    "bin/shared-crates/pool-registry-types",   # Shared types for pool registration
    
    "bin/shared-crates/secrets-management",    # Secret redaction & secure handling
    "bin/shared-crates/secrets-management/bdd",

    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # ORCHESTRATORD CRATES — Orchestrator Components
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # Libraries specific to the orchestrator service.
    
    "bin/orchestratord-crates/agentic-api",         # Agentic API endpoints (tool calls, multi-turn)
    
    "bin/orchestratord-crates/backpressure",        # Admission control & backpressure
    
    "bin/orchestratord-crates/job-timeout",         # Job timeout tracking & enforcement
    
    "bin/orchestratord-crates/orchestrator-core",   # Core orchestration (queue, dispatch)
    "bin/orchestratord-crates/orchestrator-core/bdd",
    
    "bin/orchestratord-crates/platform-api",        # Platform API (inference, completions, chat)
    
    "bin/orchestratord-crates/pool-registry",       # Pool manager registry & health tracking
    
    "bin/orchestratord-crates/scheduling",          # Programmable Lua scheduler runtime
    
    "bin/orchestratord-crates/streaming",           # SSE streaming & event emission
    
    "bin/orchestratord-crates/task-cancellation",   # Job cancellation & cleanup

    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # POOL-MANAGERD CRATES — Pool Manager Components
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # Libraries specific to the pool manager service.
    
    "bin/pool-managerd-crates/capability-matcher",        # Match job requirements to worker capabilities
    
    "bin/pool-managerd-crates/control-api",               # Control plane API (admin, ops)
    
    "bin/pool-managerd-crates/error-ops",                 # Error recovery & retry strategies
    
    "bin/pool-managerd-crates/gpu-inventory",             # GPU tracking & VRAM management
    
    "bin/pool-managerd-crates/model-cache",               # Model artifact caching
    
    "bin/pool-managerd-crates/model-catalog",             # Model metadata & discovery
    "bin/pool-managerd-crates/model-catalog/bdd",
    
    "bin/pool-managerd-crates/model-provisioner",         # Model download, verification, sealing
    "bin/pool-managerd-crates/model-provisioner/bdd",
    
    "bin/pool-managerd-crates/pool-registration-client",  # Client for registering with orchestrator
    
    "bin/pool-managerd-crates/worker-lifecycle",          # Worker spawn, ready callbacks, heartbeats

    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # CONSUMER LIBRARIES — External SDKs
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # Client libraries and utilities for external developers.
    
    "consumers/llama-orch-sdk",    # Rust SDK for llama-orch
    "consumers/llama-orch-utils",  # CLI utilities & helpers

    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # DEVELOPER TOOLS — Build & Maintenance
    # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # Tools for working with the monorepo.
    
    "tools/openapi-client",  # OpenAPI client generator
    "tools/readme-index",    # README index generator
    "tools/spec-extract",    # Spec extraction & validation
    "xtask",                 # Workspace automation (cargo xtask)
]

resolver = "2"

[workspace.package]
version = "0.0.0"
edition = "2021"
license = "GPL-3.0-or-later"
authors = ["llama-orch contributors"]

[workspace.dependencies]
anyhow = "1"
thiserror = "1"
serde = { version = "1", features = ["derive"] }
serde_json = "1"
serde_yaml = "0.9"
schemars = { version = "1.0", features = ["either1"] }
axum = { version = "0.8", features = ["macros", "json"] }
tokio = { version = "1", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["fmt", "env-filter", "json"] }
reqwest = { version = "0.12.23", default-features = false, features = ["json", "rustls-tls"] }
futures = "0.3"
http = "1"
hyper = { version = "1", features = ["http1", "http2", "server", "client"] }
bytes = "1"
uuid = { version = "1", features = ["serde", "v4"] }
clap = { version = "4", features = ["derive"] }
sha2 = "0.10"
hmac = "0.12"
subtle = "2.5"
hkdf = "0.12"
walkdir = "2"
regex = "1"
insta = { version = "1", features = ["yaml"] }
proptest = "1"
wiremock = "0.6"
openapiv3 = "2"
jsonschema = "0.33"
once_cell = "1"
chrono = { version = "0.4", features = ["serde"] }
