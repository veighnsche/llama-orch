openapi: 3.0.3
info:
  title: Orchestrator Control Plane API
  version: 1.0.0
  description: |
    Control plane endpoints for pool drain/reload and health, and replica set snapshots.
servers:
  - url: /
paths:
  /v1/catalog/models:
    post:
      operationId: createCatalogModel
      summary: Ingest or create a catalog model entry
      x-req-id: [ORCH-3060]
      parameters:
        - $ref: '#/components/parameters/XCorrelationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogModel'
            x-examples:
              example:
                value:
                  id: "llama3-8b"
                  digest: "sha256:deadbeef"
                  source_url: "registry.example.com/llama3:8b"
                  tags: ["latest", "prod"]
                  trust_policy: { mode: strict, allowed_registries: ["registry.example.com"], require_signature: true, require_sbom: true }
      responses:
        '201':
          description: Created
          headers:
            X-Correlation-Id:
              description: Correlation ID for tracing
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogModel'

  /v1/catalog/models/{id}:
    get:
      operationId: getCatalogModel
      summary: Get catalog model manifest, digests, signatures, and SBOM reference
      x-req-id: [ORCH-3060]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: '#/components/parameters/XCorrelationId'
      responses:
        '200':
          description: OK
          headers:
            X-Correlation-Id:
              description: Correlation ID for tracing
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogModel'
              x-examples:
                example:
                  value:
                    id: "llama3-8b"
                    digest: "sha256:deadbeef"
                    source_url: "registry.example.com/llama3:8b"
                    manifests: [ { digest: "sha256:deadbeef", size_bytes: 123456 } ]
                    signatures: [ { signer: "Acme CI", algo: "cosign", verified: true, timestamp_ms: 1700000000000 } ]
                    sbom: { uri: "https://sbom.example.com/llama3-8b.spdx.json", digest: "sha256:cafebabe" }

  /v1/catalog/models/{id}/verify:
    post:
      operationId: verifyCatalogModel
      summary: Trigger signature/attestation verification for a catalog entry
      x-req-id: [ORCH-3061]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: '#/components/parameters/XCorrelationId'
      responses:
        '202':
          description: Verification started
          headers:
            X-Correlation-Id:
              description: Correlation ID for tracing
              schema: { type: string }

  /v1/catalog/models/{id}/state:
    post:
      operationId: setCatalogModelState
      summary: Set model lifecycle state
      x-req-id: [ORCH-3072]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: '#/components/parameters/XCorrelationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [state]
              properties:
                state:
                  type: string
                  enum: [Active, Retired]
                deadline_ms:
                  type: integer
                  format: int64
            x-examples:
              deprecate_with_drain:
                value: { state: Retired, deadline_ms: 600000 }
      responses:
        '202':
          description: Accepted
          headers:
            X-Correlation-Id:
              description: Correlation ID for tracing
              schema: { type: string }
  /v1/pools/{id}/drain:
    post:
      operationId: drainPool
      summary: Initiate pool drain with deadline
      x-req-id: [ORCH-2101]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: '#/components/parameters/XCorrelationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DrainRequest'
      responses:
        '202':
          description: Accepted
          headers:
            X-Correlation-Id:
              description: Correlation ID for tracing
              schema: { type: string }

  /v1/pools/{id}/reload:
    post:
      operationId: reloadPool
      summary: Reload a pool with a new model reference
      x-req-id: [ORCH-2102]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: '#/components/parameters/XCorrelationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReloadRequest'
      responses:
        '202':
          description: Accepted
          headers:
            X-Correlation-Id:
              description: Correlation ID for tracing
              schema: { type: string }

  /v1/pools/{id}/health:
    get:
      operationId: getPoolHealth
      summary: Pool health and readiness
      x-req-id: [ORCH-2103]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: '#/components/parameters/XCorrelationId'
      responses:
        '200':
          description: Health summary
          headers:
            X-Correlation-Id:
              description: Correlation ID for tracing
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolHealth'

  /v1/replicasets:
    get:
      deprecated: true
      operationId: listReplicaSets
      summary: List replica sets with load/SLO snapshots
      x-req-id: [ORCH-2104]
      parameters:
        - $ref: '#/components/parameters/XCorrelationId'
      responses:
        '200':
          description: OK
          headers:
            X-Correlation-Id:
              description: Correlation ID for tracing
              schema: { type: string }
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplicaSet'

  /v1/capabilities:
    get:
      operationId: getCapabilities
      summary: Discover server capabilities and limits
      x-req-id: [OC-CTRL-2060, OC-CTRL-2061]
      parameters:
        - $ref: '#/components/parameters/XCorrelationId'
      responses:
        '200':
          description: Capability set
          headers:
            X-Correlation-Id:
              description: Correlation ID for tracing
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capabilities'

  /v1/artifacts:
    post:
      operationId: createArtifact
      summary: Store an artifact (plans, summaries, diffs, traces)
      x-req-id: [OC-CTRL-2065]
      parameters:
        - $ref: '#/components/parameters/XCorrelationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artifact'
      responses:
        '201':
          description: Created
          headers:
            X-Correlation-Id:
              description: Correlation ID for tracing
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactRef'

  /v1/artifacts/{id}:
    get:
      operationId: getArtifact
      summary: Fetch an artifact by ID
      x-req-id: [OC-CTRL-2066]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
        - $ref: '#/components/parameters/XCorrelationId'
      responses:
        '200':
          description: OK
          headers:
            X-Correlation-Id:
              description: Correlation ID for tracing
              schema: { type: string }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artifact'

components:
  parameters:
    XCorrelationId:
      name: X-Correlation-Id
      in: header
      required: false
      schema:
        type: string
      description: Optional request correlation ID; echoed back in responses.
  schemas:
    Engine:
      type: string
      enum: [llamacpp, vllm, tgi, triton]
    Workload:
      type: string
      enum: [completion, embedding, rerank]
    Capabilities:
      type: object
      required: [api_version, engines]
      properties:
        api_version: { type: string, description: OpenAPI/contract version compatibility }
        engines:
          type: array
          items:
            type: object
            required: [engine, ctx_max]
            properties:
              engine: { $ref: '#/components/schemas/Engine' }
              ctx_max: { type: integer, format: int32 }
              supported_workloads: { type: array, items: { $ref: '#/components/schemas/Workload' } }
              rate_limits: { type: object, additionalProperties: true }
              features: { type: object, additionalProperties: true }
    ArtifactKind:
      type: string
      enum: [plan, summary, diff, trace, other]
    ArtifactRef:
      type: object
      required: [id, kind]
      properties:
        id: { type: string }
        kind: { $ref: '#/components/schemas/ArtifactKind' }
        digest: { type: string }
        created_ms: { type: integer, format: int64 }
        tags: { type: array, items: { type: string } }
    Artifact:
      type: object
      required: [kind, content]
      properties:
        kind: { $ref: '#/components/schemas/ArtifactKind' }
        content: { type: object, additionalProperties: true }
        tags: { type: array, items: { type: string } }
        parent: { type: string, description: Optional parent artifact ID }
        metadata: { type: object, additionalProperties: true }
    TrustPolicy:
      type: object
      properties:
        mode: { type: string, enum: [strict, permissive] }
        allowed_registries: { type: array, items: { type: string } }
        require_signature: { type: boolean }
        require_sbom: { type: boolean }
        ca_roots: { type: array, items: { type: string } }
    SignatureMeta:
      type: object
      properties:
        signer: { type: string }
        algo: { type: string }
        verified: { type: boolean }
        timestamp_ms: { type: integer, format: int64 }
    SBOMRef:
      type: object
      properties:
        uri: { type: string }
        digest: { type: string }
    Manifest:
      type: object
      properties:
        digest: { type: string }
        size_bytes: { type: integer, format: int64 }
    CatalogModel:
      type: object
      required: [id, digest]
      properties:
        id: { type: string }
        digest: { type: string }
        source_url: { type: string }
        tags: { type: array, items: { type: string } }
        manifests: { type: array, items: { $ref: '#/components/schemas/Manifest' } }
        signatures: { type: array, items: { $ref: '#/components/schemas/SignatureMeta' } }
        sbom: { $ref: '#/components/schemas/SBOMRef' }
        trust_policy: { $ref: '#/components/schemas/TrustPolicy' }
    DrainRequest:
      type: object
      required: [deadline_ms]
      properties:
        deadline_ms: { type: integer, format: int64 }
    ReloadRequest:
      type: object
      required: [new_model_ref]
      properties:
        new_model_ref: { type: string }
    PoolHealth:
      type: object
      properties:
        live: { type: boolean }
        ready: { type: boolean }
        draining: { type: boolean }
        metrics: { type: object, additionalProperties: true }
    ReplicaSet:
      type: object
      required: [id, engine]
      properties:
        id: { type: string }
        engine: { $ref: '#/components/schemas/Engine' }
        load: { type: number, format: float }
        slots_total: { type: integer, format: int32 }
        slots_free: { type: integer, format: int32 }
        slo: { type: object, additionalProperties: true }
