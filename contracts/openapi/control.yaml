openapi: 3.0.3
info:
  title: Orchestrator Control Plane API
  version: 1.0.0
  description: |
    Control plane endpoints for pool drain/reload and health, and replica set snapshots.
servers:
  - url: /
paths:
  /v1/catalog/models:
    post:
      operationId: createCatalogModel
      summary: Ingest or create a catalog model entry
      x-req-id: [ORCH-3060]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogModel'
      responses:
        '201': { description: Created }

  /v1/catalog/models/{id}:
    get:
      operationId: getCatalogModel
      summary: Get catalog model manifest, digests, signatures, and SBOM reference
      x-req-id: [ORCH-3060]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogModel'

  /v1/catalog/models/{id}/verify:
    post:
      operationId: verifyCatalogModel
      summary: Trigger signature/attestation verification for a catalog entry
      x-req-id: [ORCH-3061]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '202': { description: Verification started }

  /v1/catalog/models/{id}/state:
    post:
      operationId: setCatalogModelState
      summary: Set model lifecycle state
      x-req-id: [ORCH-3072]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [state]
              properties:
                state:
                  type: string
                  enum: [Draft, Active, Canary, Deprecated, Retired]
                deadline_ms:
                  type: integer
                  format: int64
      responses:
        '202': { description: Accepted }
  /v1/pools/{id}/drain:
    post:
      operationId: drainPool
      summary: Initiate pool drain with deadline
      x-req-id: [ORCH-2101]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DrainRequest'
      responses:
        '202': { description: Accepted }

  /v1/pools/{id}/reload:
    post:
      operationId: reloadPool
      summary: Reload a pool with a new model reference
      x-req-id: [ORCH-2102]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReloadRequest'
      responses:
        '202': { description: Accepted }

  /v1/pools/{id}/health:
    get:
      operationId: getPoolHealth
      summary: Pool health and readiness
      x-req-id: [ORCH-2103]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Health summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoolHealth'

  /v1/replicasets:
    get:
      operationId: listReplicaSets
      summary: List replica sets with load/SLO snapshots
      x-req-id: [ORCH-2104]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReplicaSet'

components:
  schemas:
    Engine:
      type: string
      enum: [llamacpp, vllm, tgi, triton]
    TrustPolicy:
      type: object
      properties:
        mode: { type: string, enum: [strict, permissive] }
        allowed_registries: { type: array, items: { type: string } }
        require_signature: { type: boolean }
        require_sbom: { type: boolean }
        ca_roots: { type: array, items: { type: string } }
    SignatureMeta:
      type: object
      properties:
        signer: { type: string }
        algo: { type: string }
        verified: { type: boolean }
        timestamp_ms: { type: integer, format: int64 }
    SBOMRef:
      type: object
      properties:
        uri: { type: string }
        digest: { type: string }
    Manifest:
      type: object
      properties:
        digest: { type: string }
        size_bytes: { type: integer, format: int64 }
    CatalogModel:
      type: object
      required: [id, digest]
      properties:
        id: { type: string }
        digest: { type: string }
        source_url: { type: string }
        tags: { type: array, items: { type: string } }
        manifests: { type: array, items: { $ref: '#/components/schemas/Manifest' } }
        signatures: { type: array, items: { $ref: '#/components/schemas/SignatureMeta' } }
        sbom: { $ref: '#/components/schemas/SBOMRef' }
        trust_policy: { $ref: '#/components/schemas/TrustPolicy' }
    DrainRequest:
      type: object
      required: [deadline_ms]
      properties:
        deadline_ms: { type: integer, format: int64 }
    ReloadRequest:
      type: object
      required: [new_model_ref]
      properties:
        new_model_ref: { type: string }
    PoolHealth:
      type: object
      properties:
        live: { type: boolean }
        ready: { type: boolean }
        draining: { type: boolean }
        metrics: { type: object, additionalProperties: true }
    ReplicaSet:
      type: object
      required: [id, engine]
      properties:
        id: { type: string }
        engine: { $ref: '#/components/schemas/Engine' }
        load: { type: number, format: float }
        slots_total: { type: integer, format: int32 }
        slots_free: { type: integer, format: int32 }
        slo: { type: object, additionalProperties: true }
