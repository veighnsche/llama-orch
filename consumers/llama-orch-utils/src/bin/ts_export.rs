#[cfg(feature = "ts-types")]
fn main() -> std::io::Result<()> {
    use std::fs;
    use std::io::Write;
    use std::path::Path;
    use ts_rs::TS;

    use llama_orch_utils::fs::file_reader::{FileBlob, ReadRequest, ReadResponse};
    use llama_orch_utils::fs::file_writer::{WriteIn, WriteOut};
    use llama_orch_utils::model::define::ModelRef;
    use llama_orch_utils::params::define::Params;
    use llama_orch_utils::prompt::message::{Message, MessageIn, Source};
    use llama_orch_utils::prompt::thread::{ThreadIn, ThreadItem, ThreadOut};
    use llama_orch_utils::llm::invoke::{Choice, InvokeIn, InvokeOut, InvokeResult, SdkMsg, Usage};

    const OUT_DIR: &str = "/home/vince/Projects/llama-orch/consumers/llama-orch-utils-types";
    const OUT_FILE: &str = "/home/vince/Projects/llama-orch/consumers/llama-orch-utils-types/index.d.ts";

    // Ensure output directory exists
    fs::create_dir_all(OUT_DIR)?;

    let mut buf = String::new();
    buf.push_str("// Auto-generated by ts_export (llama-orch-utils). Do not edit.\n\n");

    fn append<T: TS>(buf: &mut String) {
        let mut d = T::decl();
        // Ensure top-level declarations are exported for editor imports
        if d.starts_with("type ") {
            d = d.replacen("type ", "export type ", 1);
        }
        buf.push_str(&d);
        buf.push_str("\n\n");
    }

    // Append declarations for all public I/O types
    append::<ReadRequest>(&mut buf);
    append::<FileBlob>(&mut buf);
    append::<ReadResponse>(&mut buf);

    append::<WriteIn>(&mut buf);
    append::<WriteOut>(&mut buf);

    append::<Source>(&mut buf);
    append::<MessageIn>(&mut buf);
    append::<Message>(&mut buf);

    append::<ThreadItem>(&mut buf);
    append::<ThreadIn>(&mut buf);
    append::<ThreadOut>(&mut buf);

    append::<ModelRef>(&mut buf);
    append::<Params>(&mut buf);

    append::<SdkMsg>(&mut buf);
    append::<Choice>(&mut buf);
    append::<Usage>(&mut buf);
    append::<InvokeResult>(&mut buf);
    append::<InvokeIn>(&mut buf);
    append::<InvokeOut>(&mut buf);

    // Write to the combined index.d.ts
    let path = Path::new(OUT_FILE);
    let mut f = fs::File::create(path)?;
    f.write_all(buf.as_bytes())?;

    Ok(())
}

#[cfg(not(feature = "ts-types"))]
fn main() {
    eprintln!("ts_export requires the 'ts-types' feature. Run with: cargo run --bin ts_export --features ts-types");
}
