//! llama-orch-utils: M2 applets library for Blueprint pipelines.
//! This crate hosts applets under `src/[namespace]/[applet]/`.

pub mod fs;
pub mod prompt;
pub mod model;
pub mod params;
pub mod llm;
pub mod orch;
pub mod error;

// WASI/WASM minimal FFI surface (JSON-in/JSON-out) for Node/Bun loader
#[cfg(target_arch = "wasm32")]
pub mod wasm_api;

#[cfg(feature = "ts-types")]
pub fn export_ts_types() -> std::io::Result<()> {
    use std::env;
    use std::fs;
    use std::io::Write;
    use std::path::PathBuf;
    use ts_rs::TS;

    // Bring all public I/O types into scope
    use crate::fs::file_reader::{FileBlob, ReadRequest, ReadResponse};
    use crate::fs::file_writer::{WriteIn, WriteOut};
    use crate::prompt::message::{Message, MessageIn, Source};
    use crate::prompt::thread::{ThreadIn, ThreadItem, ThreadOut};
    use crate::model::define::ModelRef;
    use crate::params::define::Params;
    use crate::llm::invoke::{Choice, InvokeIn, InvokeOut, InvokeResult, SdkMsg, Usage};

    let root = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap_or_else(|_| ".".to_string()));
    let out_dir = root.join("npm-build");
    let out_file = out_dir.join("types.d.ts");
    fs::create_dir_all(&out_dir)?;

    let mut buf = String::new();
    buf.push_str("// Auto-generated by export_ts_types (llama-orch-utils). Do not edit.\n\n");

    fn append<T: TS>(buf: &mut String) {
        let mut d = T::decl();
        if d.starts_with("type ") {
            d = d.replacen("type ", "export type ", 1);
        }
        buf.push_str(&d);
        buf.push_str("\n\n");
    }

    // Append declarations for all public applet I/O types
    append::<ReadRequest>(&mut buf);
    append::<FileBlob>(&mut buf);
    append::<ReadResponse>(&mut buf);

    append::<WriteIn>(&mut buf);
    append::<WriteOut>(&mut buf);

    append::<Source>(&mut buf);
    append::<MessageIn>(&mut buf);
    append::<Message>(&mut buf);

    append::<ThreadItem>(&mut buf);
    append::<ThreadIn>(&mut buf);
    append::<ThreadOut>(&mut buf);

    append::<ModelRef>(&mut buf);
    append::<Params>(&mut buf);

    append::<SdkMsg>(&mut buf);
    append::<Choice>(&mut buf);
    append::<Usage>(&mut buf);
    append::<InvokeResult>(&mut buf);
    append::<InvokeIn>(&mut buf);
    append::<InvokeOut>(&mut buf);

    // Write index.d.ts (overwrite)
    let mut f = fs::File::create(&out_file)?;
    f.write_all(buf.as_bytes())?;

    Ok(())
}
