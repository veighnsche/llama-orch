#!/usr/bin/env node
import { promises as fsp } from 'node:fs';
import { fileURLToPath } from 'node:url';
import { dirname, resolve } from 'node:path';

const here = dirname(fileURLToPath(import.meta.url));
const root = resolve(here, '..');
const typesPath = resolve(root, 'npm-build', 'types.d.ts');
const outPath = resolve(root, 'index.d.ts');

(async () => {
  try {
    const types = await fsp.readFile(typesPath, 'utf8');

    const header = `// Auto-generated by compose-dts.mjs. Do not edit.\n`;

    const api = `
export declare const fs: {
  readFile(input: ReadRequest): ReadResponse;
  readFile(path: string): ReadResponse;
  writeFile(input: WriteIn): WriteOut;
};

export declare const prompt: {
  message(input: MessageIn): Message;
  thread(input: ThreadIn): ThreadOut;
};

export declare const model: {
  define(model_id: string, engine_id?: string | null, pool_hint?: string | null): ModelRef;
};

export declare const params: {
  define(p: Params): Params;
};

export declare const llm: {
  invoke(input: InvokeIn): InvokeOut;
};

export declare const orch: {
  response_extractor(result: InvokeResult): string;
};

declare const _default: { fs: typeof fs; prompt: typeof prompt; model: typeof model; params: typeof params; llm: typeof llm; orch: typeof orch };
export default _default;
`;

    await fsp.writeFile(outPath, header + '\n' + types + '\n' + api);
    console.log('Wrote', outPath);
  } catch (err) {
    console.error('compose-dts failed:', err.message || err);
    process.exit(1);
  }
})();
