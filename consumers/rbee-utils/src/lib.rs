//! llama-orch-utils: M2 applets library for Blueprint pipelines.
//! This crate hosts applets under `src/[namespace]/[applet]/`.

pub mod error;
pub mod fs;
pub mod llm;
pub mod manifest;
pub mod model;
pub mod orch;
pub mod params;
pub mod prompt;

// WASI/WASM minimal FFI surface (JSON-in/JSON-out) for Node/Bun loader
#[cfg(target_arch = "wasm32")]
pub mod wasm_api;

#[cfg(feature = "ts-types")]
pub fn export_ts_types() -> std::io::Result<()> {
    use std::env;
    use std::fs;
    use std::io::Write;
    use std::path::PathBuf;
    // All type declarations are appended by crate::manifest::append_ts_types

    let root = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap_or_else(|_| ".".to_string()));
    let out_dir = root.join("npm-build");
    let out_file = out_dir.join("types.d.ts");
    let manifest_file = out_dir.join("manifest.json");
    fs::create_dir_all(&out_dir)?;

    let mut buf = String::new();
    buf.push_str("// Auto-generated by export_ts_types (llama-orch-utils). Do not edit.\n\n");
    crate::manifest::append_ts_types(&mut buf);

    // Write types.d.ts (overwrite)
    let mut f = fs::File::create(&out_file)?;
    f.write_all(buf.as_bytes())?;

    // Write manifest.json from Rust source of truth
    let manifest_json = crate::manifest::manifest_json_string()
        .map_err(|e| std::io::Error::other(e.to_string()))?;
    let mut mf = fs::File::create(&manifest_file)?;
    mf.write_all(manifest_json.as_bytes())?;

    Ok(())
}
