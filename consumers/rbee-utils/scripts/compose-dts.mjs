#!/usr/bin/env node
import { promises as fsp } from 'node:fs'
import { dirname, resolve } from 'node:path'
import { fileURLToPath } from 'node:url'

const here = dirname(fileURLToPath(import.meta.url))
const root = resolve(here, '..')
const typesPath = resolve(root, 'npm-build', 'types.d.ts')
const manifestPath = resolve(root, 'npm-build', 'manifest.json')
const outDir = resolve(root, 'dist')
const outPath = resolve(outDir, 'index.d.ts')

;(async () => {
  try {
    const [types, manifestJson] = await Promise.all([
      fsp.readFile(typesPath, 'utf8'),
      fsp.readFile(manifestPath, 'utf8'),
    ])
    const manifest = JSON.parse(manifestJson)

    const header = `// Auto-generated by compose-dts.mjs. Do not edit.`

    function methodSig(name, m) {
      const inputT = m.input === 'string' ? 'string' : m.input
      const outputT = m.output === 'string' ? 'string' : m.output
      return `    ${name}(input: ${inputT}): ${outputT};`
    }

    let apiDecl = 'export type Api = {\n'
    for (const [cat, info] of Object.entries(manifest)) {
      apiDecl += `  ${cat}: {\n`
      for (const [name, m] of Object.entries(info.methods || {})) {
        apiDecl += methodSig(name, m) + '\n'
      }
      apiDecl += '  };\n'
    }
    apiDecl += '};\n\n'
    apiDecl += 'declare const _default: Api;\nexport default _default;\n'

    await fsp.mkdir(outDir, { recursive: true })
    await fsp.writeFile(outPath, header + '\n\n' + types + '\n' + apiDecl)
    console.log('Wrote', outPath)
  } catch (err) {
    console.error('compose-dts failed:', err.message || err)
    process.exit(1)
  }
})()
