#!/usr/bin/env bash
set -euo pipefail

# Simple verifier for Proof Bundle autogenerated headers.
# Usage: ci/scripts/check_proof_bundle_headers.sh [base_dir]
# base_dir defaults to repo root.

BASE_DIR=${1:-"$(git rev-parse --show-toplevel 2>/dev/null || pwd)"}

fail() { echo "[FAIL] $*" >&2; exit 1; }
warn() { echo "[WARN] $*" >&2; }
info() { echo "[INFO] $*"; }

HEADER_LINE="# AUTOGENERATED: Proof Bundle"

# Find bundle roots
mapfile -t BUNDLE_DIRS < <(find "$BASE_DIR" -type d -name .proof_bundle 2>/dev/null)

if [[ ${#BUNDLE_DIRS[@]} -eq 0 ]]; then
  info "No .proof_bundle directories found under $BASE_DIR"
  exit 0
fi

RC=0
for pdir in "${BUNDLE_DIRS[@]}"; do
  while IFS= read -r -d '' f; do
    rel="${f#$BASE_DIR/}"
    case "$f" in
      *.md|*.markdown|*.txt|*.csv)
        first=$(head -n 1 "$f" || true)
        if [[ "$first" != "$HEADER_LINE" ]]; then
          echo "[ERROR] Missing header in $rel (first line must be: $HEADER_LINE)" >&2
          RC=1
        fi
        ;;
      *.ndjson|*.jsonl)
        first=$(head -n 1 "$f" || true)
        if ! grep -q '"_meta"\s*:\s*"proof_bundle"' <<<"$first"; then
          echo "[ERROR] Missing NDJSON meta in $rel (first record should contain _meta: \"proof_bundle\")" >&2
          RC=1
        fi
        ;;
      *.json)
        # Check for sibling .meta file or embedded generated_by field in first 10 lines
        if [[ ! -f "$f.meta" ]]; then
          if ! head -n 10 "$f" | grep -q '"generated_by"\s*:\s*"proof-bundle"'; then
            echo "[ERROR] Missing JSON meta in $rel (expect $rel.meta or embedded generated_by)" >&2
            RC=1
          fi
        fi
        ;;
      *)
        # Ignore other binaries/non-texts
        :
        ;;
    esac
  done < <(find "$pdir" -type f -print0)

done

if [[ $RC -ne 0 ]]; then
  fail "Proof bundle header checks failed"
fi

info "Proof bundle header checks passed"
