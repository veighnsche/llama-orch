{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_available_vram_returns_value" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_deallocate_removes_allocation" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_deallocate_updates_used_vram" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_default_trait" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_large_model_seal" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_multiple_allocations" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_new_manager_creation" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_seal_computes_correct_digest" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_seal_different_data_different_digests" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_seal_generates_unique_shard_ids" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_seal_model_basic" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_seal_model_zero_size_rejected" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_seal_model_zero_size_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_seal_same_data_same_digest" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_available_vram_returns_value", "event": "ok" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_seal_sets_gpu_device" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_new_manager_creation", "event": "ok" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_seal_sets_signature" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_default_trait", "event": "ok" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_seal_sets_timestamp" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_seal_sets_gpu_device", "event": "ok" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_seal_sets_vram_bytes" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_seal_computes_correct_digest", "event": "ok" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_total_vram_greater_than_or_equal_available" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_total_vram_greater_than_or_equal_available", "event": "ok" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_total_vram_returns_value" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_deallocate_updates_used_vram", "event": "ok" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_verify_sealed_missing_signature_rejected" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_seal_model_basic", "event": "ok" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_verify_sealed_unsealed_shard_rejected" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_deallocate_removes_allocation", "event": "ok" }
{ "type": "test", "event": "started", "name": "allocator::vram_manager::tests::test_verify_sealed_valid" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_total_vram_returns_value", "event": "ok" }
{ "type": "test", "event": "started", "name": "cuda_ffi::tests::test_bounds_checking_overflow" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_verify_sealed_missing_signature_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "cuda_ffi::tests::test_context_creation" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_seal_generates_unique_shard_ids", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::digest::tests::test_compute_digest_avalanche_effect" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_verify_sealed_unsealed_shard_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::digest::tests::test_compute_digest_collision_resistance" }
{ "type": "test", "name": "cuda_ffi::tests::test_context_creation", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::digest::tests::test_compute_digest_deterministic" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_seal_same_data_same_digest", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::digest::tests::test_compute_digest_different_data_different_output" }
{ "type": "test", "name": "seal::digest::tests::test_compute_digest_avalanche_effect", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::digest::tests::test_compute_digest_empty_data" }
{ "type": "test", "name": "cuda_ffi::tests::test_bounds_checking_overflow", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::digest::tests::test_compute_digest_format_is_hex" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_seal_sets_vram_bytes", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::digest::tests::test_compute_digest_large_data" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_seal_sets_timestamp", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::digest::tests::test_compute_digest_small_data" }
{ "type": "test", "name": "seal::digest::tests::test_compute_digest_collision_resistance", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::key_derivation::tests::test_derive_seal_key_deterministic" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_seal_sets_signature", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::key_derivation::tests::test_derive_seal_key_different_domains_different_keys" }
{ "type": "test", "name": "seal::digest::tests::test_compute_digest_different_data_different_output", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::key_derivation::tests::test_derive_seal_key_different_tokens_different_keys" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_seal_different_data_different_digests", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::key_derivation::tests::test_derive_seal_key_empty_domain_rejected" }
{ "type": "test", "name": "seal::digest::tests::test_compute_digest_empty_data", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::key_derivation::tests::test_derive_seal_key_empty_token_rejected" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_verify_sealed_valid", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::key_derivation::tests::test_derive_seal_key_long_domain" }
{ "type": "test", "name": "seal::digest::tests::test_compute_digest_deterministic", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::key_derivation::tests::test_derive_seal_key_long_token" }
{ "type": "test", "name": "seal::digest::tests::test_compute_digest_format_is_hex", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::key_derivation::tests::test_derive_seal_key_output_length" }
{ "type": "test", "name": "seal::digest::tests::test_compute_digest_small_data", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::key_derivation::tests::test_derive_seal_key_valid_inputs" }
{ "type": "test", "name": "seal::key_derivation::tests::test_derive_seal_key_empty_domain_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_compute_signature_deterministic" }
{ "type": "test", "name": "seal::key_derivation::tests::test_derive_seal_key_empty_token_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_compute_signature_empty_key_rejected" }
{ "type": "test", "name": "seal::key_derivation::tests::test_derive_seal_key_deterministic", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_compute_signature_empty_shard_id_rejected" }
{ "type": "test", "name": "seal::key_derivation::tests::test_derive_seal_key_output_length", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_compute_signature_invalid_digest_length_rejected" }
{ "type": "test", "name": "seal::signature::tests::test_compute_signature_invalid_digest_length_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_compute_signature_oversized_key_rejected" }
{ "type": "test", "name": "seal::signature::tests::test_compute_signature_deterministic", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_compute_signature_short_key_rejected" }
{ "type": "test", "name": "seal::key_derivation::tests::test_derive_seal_key_different_tokens_different_keys", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_compute_signature_valid_inputs" }
{ "type": "test", "name": "seal::key_derivation::tests::test_derive_seal_key_long_domain", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_compute_signature_zero_vram_bytes_rejected" }
{ "type": "test", "name": "seal::key_derivation::tests::test_derive_seal_key_long_token", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_signature_all_ones_key_works" }
{ "type": "test", "name": "seal::key_derivation::tests::test_derive_seal_key_different_domains_different_keys", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_signature_all_zeros_key_works" }
{ "type": "test", "name": "seal::key_derivation::tests::test_derive_seal_key_valid_inputs", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_signature_different_for_different_keys" }
{ "type": "test", "name": "seal::signature::tests::test_compute_signature_empty_key_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_signature_different_for_different_shards" }
{ "type": "test", "name": "seal::signature::tests::test_compute_signature_oversized_key_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_signature_large_vram_bytes" }
{ "type": "test", "name": "seal::signature::tests::test_compute_signature_empty_shard_id_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_signature_max_length_shard_id" }
{ "type": "test", "name": "seal::signature::tests::test_compute_signature_short_key_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_signature_max_size_key_works" }
{ "type": "test", "name": "seal::signature::tests::test_compute_signature_zero_vram_bytes_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_signature_single_bit_difference_detected" }
{ "type": "test", "name": "seal::signature::tests::test_compute_signature_valid_inputs", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_signature_unicode_shard_id" }
{ "type": "test", "name": "seal::signature::tests::test_signature_all_ones_key_works", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_timing_safe_comparison" }
{ "type": "test", "name": "seal::signature::tests::test_signature_all_zeros_key_works", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_verify_signature_empty_signature_rejected" }
{ "type": "test", "name": "seal::signature::tests::test_signature_different_for_different_keys", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_verify_signature_invalid_rejected" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_multiple_allocations", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_verify_signature_length_mismatch_rejected" }
{ "type": "test", "name": "seal::signature::tests::test_signature_large_vram_bytes", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_verify_signature_tampered_digest_rejected" }
{ "type": "test", "name": "seal::signature::tests::test_signature_different_for_different_shards", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_verify_signature_tampered_shard_id_rejected" }
{ "type": "test", "name": "seal::signature::tests::test_signature_max_length_shard_id", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_verify_signature_valid" }
{ "type": "test", "name": "seal::signature::tests::test_verify_signature_empty_signature_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_verify_signature_wrong_key_rejected" }
{ "type": "test", "name": "seal::signature::tests::test_signature_unicode_shard_id", "event": "ok" }
{ "type": "test", "event": "started", "name": "seal::signature::tests::test_verify_signature_wrong_length_signature_rejected" }
{ "type": "test", "name": "seal::signature::tests::test_timing_safe_comparison", "event": "ok" }
{ "type": "test", "event": "started", "name": "tests::test_seal_model" }
{ "type": "test", "name": "seal::signature::tests::test_verify_signature_invalid_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "types::sealed_shard::tests::test_clone" }
{ "type": "test", "name": "seal::signature::tests::test_verify_signature_length_mismatch_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "types::sealed_shard::tests::test_debug_format_omits_vram_ptr" }
{ "type": "test", "name": "seal::signature::tests::test_signature_max_size_key_works", "event": "ok" }
{ "type": "test", "event": "started", "name": "types::sealed_shard::tests::test_is_sealed_with_digest" }
{ "type": "test", "name": "seal::signature::tests::test_verify_signature_tampered_digest_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "types::sealed_shard::tests::test_is_sealed_without_digest" }
{ "type": "test", "name": "seal::signature::tests::test_verify_signature_tampered_shard_id_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "types::sealed_shard::tests::test_new_shard_creation" }
{ "type": "test", "name": "seal::signature::tests::test_verify_signature_valid", "event": "ok" }
{ "type": "test", "event": "started", "name": "types::sealed_shard::tests::test_optional_fields_default_to_none" }
{ "type": "test", "name": "seal::signature::tests::test_verify_signature_wrong_length_signature_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "types::sealed_shard::tests::test_set_and_get_signature" }
{ "type": "test", "name": "seal::signature::tests::test_verify_signature_wrong_key_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "types::sealed_shard::tests::test_vram_ptr_accessor" }
{ "type": "test", "name": "types::sealed_shard::tests::test_clone", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::gpu_device::tests::test_boundary_device_equals_max_rejected" }
{ "type": "test", "name": "types::sealed_shard::tests::test_debug_format_omits_vram_ptr", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::gpu_device::tests::test_boundary_device_one_less_than_max_accepted" }
{ "type": "test", "name": "types::sealed_shard::tests::test_is_sealed_with_digest", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::gpu_device::tests::test_device_out_of_range_rejected" }
{ "type": "test", "name": "types::sealed_shard::tests::test_is_sealed_without_digest", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::gpu_device::tests::test_device_zero_with_one_device" }
{ "type": "test", "name": "types::sealed_shard::tests::test_new_shard_creation", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::gpu_device::tests::test_max_allowed_devices_16" }
{ "type": "test", "name": "types::sealed_shard::tests::test_optional_fields_default_to_none", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::gpu_device::tests::test_max_devices_too_large_rejected" }
{ "type": "test", "name": "types::sealed_shard::tests::test_set_and_get_signature", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::gpu_device::tests::test_max_devices_zero_rejected" }
{ "type": "test", "name": "types::sealed_shard::tests::test_vram_ptr_accessor", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::gpu_device::tests::test_valid_device_in_range" }
{ "type": "test", "name": "validation::gpu_device::tests::test_boundary_device_equals_max_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::model_size::tests::test_boundary_size_equals_max_accepted" }
{ "type": "test", "name": "validation::gpu_device::tests::test_boundary_device_one_less_than_max_accepted", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::model_size::tests::test_boundary_size_one_over_max_rejected" }
{ "type": "test", "name": "validation::gpu_device::tests::test_device_out_of_range_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::model_size::tests::test_large_sizes" }
{ "type": "test", "name": "validation::gpu_device::tests::test_device_zero_with_one_device", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::model_size::tests::test_size_exceeds_max_rejected" }
{ "type": "test", "name": "validation::gpu_device::tests::test_max_allowed_devices_16", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::model_size::tests::test_valid_model_size" }
{ "type": "test", "name": "validation::gpu_device::tests::test_max_devices_too_large_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::model_size::tests::test_zero_size_rejected" }
{ "type": "test", "name": "validation::gpu_device::tests::test_max_devices_zero_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::shard_id::tests::test_boundary_length_257_rejected" }
{ "type": "test", "name": "validation::gpu_device::tests::test_valid_device_in_range", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::shard_id::tests::test_control_characters_rejected" }
{ "type": "test", "name": "validation::model_size::tests::test_boundary_size_equals_max_accepted", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::shard_id::tests::test_empty_shard_id_rejected" }
{ "type": "test", "name": "validation::model_size::tests::test_boundary_size_one_over_max_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::shard_id::tests::test_exactly_256_chars_accepted" }
{ "type": "test", "name": "validation::model_size::tests::test_large_sizes", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::shard_id::tests::test_invalid_special_characters_rejected" }
{ "type": "test", "name": "validation::model_size::tests::test_size_exceeds_max_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::shard_id::tests::test_null_byte_injection_rejected" }
{ "type": "test", "name": "validation::model_size::tests::test_valid_model_size", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::shard_id::tests::test_path_traversal_with_backslash_rejected" }
{ "type": "test", "name": "validation::model_size::tests::test_zero_size_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::shard_id::tests::test_path_traversal_with_dotdot_rejected" }
{ "type": "test", "name": "validation::shard_id::tests::test_boundary_length_257_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::shard_id::tests::test_path_traversal_with_slash_rejected" }
{ "type": "test", "name": "validation::shard_id::tests::test_control_characters_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::shard_id::tests::test_too_long_shard_id_rejected" }
{ "type": "test", "name": "validation::shard_id::tests::test_empty_shard_id_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::shard_id::tests::test_valid_shard_id_alphanumeric" }
{ "type": "test", "name": "validation::shard_id::tests::test_invalid_special_characters_rejected", "event": "ok" }
{ "type": "test", "event": "started", "name": "validation::shard_id::tests::test_valid_shard_id_with_allowed_chars" }
{ "type": "test", "name": "validation::shard_id::tests::test_null_byte_injection_rejected", "event": "ok" }
{ "type": "test", "name": "validation::shard_id::tests::test_exactly_256_chars_accepted", "event": "ok" }
{ "type": "test", "name": "validation::shard_id::tests::test_path_traversal_with_backslash_rejected", "event": "ok" }
{ "type": "test", "name": "validation::shard_id::tests::test_path_traversal_with_dotdot_rejected", "event": "ok" }
{ "type": "test", "name": "validation::shard_id::tests::test_path_traversal_with_slash_rejected", "event": "ok" }
{ "type": "test", "name": "validation::shard_id::tests::test_too_long_shard_id_rejected", "event": "ok" }
{ "type": "test", "name": "validation::shard_id::tests::test_valid_shard_id_alphanumeric", "event": "ok" }
{ "type": "test", "name": "validation::shard_id::tests::test_valid_shard_id_with_allowed_chars", "event": "ok" }
{ "type": "test", "name": "seal::signature::tests::test_signature_single_bit_difference_detected", "event": "ok" }
{ "type": "test", "name": "seal::digest::tests::test_compute_digest_large_data", "event": "ok" }
{ "type": "test", "name": "tests::test_seal_model", "event": "ok" }
{ "type": "test", "name": "allocator::vram_manager::tests::test_large_model_seal", "event": "ok" }
{ "type": "test", "event": "started", "name": "generate_comprehensive_proof_bundle" }
{ "type": "test", "event": "started", "name": "generate_comprehensive_proof_bundle_fast" }
{ "type": "test", "name": "generate_comprehensive_proof_bundle", "event": "ignored" }
{ "type": "test", "name": "generate_comprehensive_proof_bundle_fast", "event": "ignored" }
{ "type": "test", "event": "started", "name": "test_allocate_huge_size" }
{ "type": "test", "event": "started", "name": "test_allocate_large_valid_size" }
{ "type": "test", "event": "started", "name": "test_allocate_multiple" }
{ "type": "test", "event": "started", "name": "test_allocate_valid_size" }
{ "type": "test", "event": "started", "name": "test_allocate_zero_size" }
{ "type": "test", "event": "started", "name": "test_allocation_alignment" }
{ "type": "test", "event": "started", "name": "test_context_creation_invalid_device" }
{ "type": "test", "event": "started", "name": "test_context_creation_with_gpu" }
{ "type": "test", "event": "started", "name": "test_drop_frees_memory" }
{ "type": "test", "event": "started", "name": "test_error_recovery_after_failed_allocation" }
{ "type": "test", "event": "started", "name": "test_error_recovery_after_invalid_operation" }
{ "type": "test", "event": "started", "name": "test_get_free_vram" }
{ "type": "test", "name": "test_context_creation_invalid_device", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_get_total_vram" }
{ "type": "test", "name": "test_allocate_zero_size", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_large_copy" }
{ "type": "test", "name": "test_context_creation_with_gpu", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_many_small_allocations" }
{ "type": "test", "name": "test_error_recovery_after_failed_allocation", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_read_out_of_bounds" }
{ "type": "test", "name": "test_allocate_huge_size", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_read_overflow" }
{ "type": "test", "name": "test_get_free_vram", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_read_zero_bytes" }
{ "type": "test", "name": "test_drop_frees_memory", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_vram_info_consistency" }
{ "type": "test", "name": "test_error_recovery_after_invalid_operation", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_write_and_read" }
{ "type": "test", "name": "test_allocation_alignment", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_write_at_offset" }
{ "type": "test", "name": "test_allocate_multiple", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_write_out_of_bounds" }
{ "type": "test", "name": "test_allocate_valid_size", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_write_overflow" }
{ "type": "test", "name": "test_get_total_vram", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_write_read_pattern" }
{ "type": "test", "name": "test_allocate_large_valid_size", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_write_zero_bytes" }
{ "type": "test", "name": "test_large_copy", "event": "ok" }
{ "type": "test", "name": "test_read_out_of_bounds", "event": "ok" }
{ "type": "test", "name": "test_read_overflow", "event": "ok" }
{ "type": "test", "name": "test_many_small_allocations", "event": "ok" }
{ "type": "test", "name": "test_write_zero_bytes", "event": "ok" }
{ "type": "test", "name": "test_write_read_pattern", "event": "ok" }
{ "type": "test", "name": "test_write_at_offset", "event": "ok" }
{ "type": "test", "name": "test_write_overflow", "event": "ok" }
{ "type": "test", "name": "test_read_zero_bytes", "event": "ok" }
{ "type": "test", "name": "test_vram_info_consistency", "event": "ok" }
{ "type": "test", "name": "test_write_and_read", "event": "ok" }
{ "type": "test", "name": "test_write_out_of_bounds", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_capacity_queries_dual_mode" }
{ "type": "test", "event": "started", "name": "test_digest_determinism_dual_mode" }
{ "type": "test", "event": "started", "name": "test_large_allocation_dual_mode" }
{ "type": "test", "event": "started", "name": "test_multiple_allocations_dual_mode" }
{ "type": "test", "event": "started", "name": "test_seal_model_dual_mode" }
{ "type": "test", "event": "started", "name": "test_verify_sealed_dual_mode" }
{ "type": "test", "event": "started", "name": "test_zero_size_rejection_dual_mode" }
{ "type": "test", "name": "test_zero_size_rejection_dual_mode", "event": "ok" }
{ "type": "test", "name": "test_digest_determinism_dual_mode", "event": "ok" }
{ "type": "test", "name": "test_seal_model_dual_mode", "event": "ok" }
{ "type": "test", "name": "test_capacity_queries_dual_mode", "event": "ok" }
{ "type": "test", "name": "test_verify_sealed_dual_mode", "event": "ok" }
{ "type": "test", "name": "test_multiple_allocations_dual_mode", "event": "ok" }
{ "type": "test", "name": "test_large_allocation_dual_mode", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_concurrent_capacity_queries" }
{ "type": "test", "event": "started", "name": "test_concurrent_seal_and_verify" }
{ "type": "test", "event": "started", "name": "test_concurrent_seal_operations" }
{ "type": "test", "event": "started", "name": "test_concurrent_seal_with_capacity_limit" }
{ "type": "test", "event": "started", "name": "test_concurrent_signature_computation" }
{ "type": "test", "event": "started", "name": "test_concurrent_signature_verification" }
{ "type": "test", "event": "started", "name": "test_interleaved_seal_verify_operations" }
{ "type": "test", "event": "started", "name": "test_no_race_condition_in_allocation_tracking" }
{ "type": "test", "name": "test_concurrent_signature_computation", "event": "ok" }
{ "type": "test", "name": "test_concurrent_signature_verification", "event": "ok" }
{ "type": "test", "name": "test_no_race_condition_in_allocation_tracking", "event": "ok" }
{ "type": "test", "name": "test_concurrent_seal_and_verify", "event": "ok" }
{ "type": "test", "name": "test_concurrent_capacity_queries", "event": "ok" }
{ "type": "test", "name": "test_concurrent_seal_operations", "event": "ok" }
{ "type": "test", "name": "test_interleaved_seal_verify_operations", "event": "ok" }
{ "type": "test", "name": "test_concurrent_seal_with_capacity_limit", "event": "ok" }
{ "type": "test", "event": "started", "name": "prop_different_data_different_digests" }
{ "type": "test", "event": "started", "name": "prop_different_keys_different_signatures" }
{ "type": "test", "event": "started", "name": "prop_digest_avalanche_effect" }
{ "type": "test", "event": "started", "name": "prop_digest_deterministic" }
{ "type": "test", "event": "started", "name": "prop_digest_format" }
{ "type": "test", "event": "started", "name": "prop_invalid_signature_fails" }
{ "type": "test", "event": "started", "name": "prop_seal_preserves_size" }
{ "type": "test", "event": "started", "name": "prop_seal_verify_roundtrip" }
{ "type": "test", "event": "started", "name": "prop_signature_deterministic" }
{ "type": "test", "event": "started", "name": "prop_signature_length" }
{ "type": "test", "event": "started", "name": "prop_tampered_shard_id_fails" }
{ "type": "test", "event": "started", "name": "prop_unique_shard_ids" }
{ "type": "test", "name": "prop_different_data_different_digests", "event": "ignored" }
{ "type": "test", "event": "started", "name": "prop_valid_signature_verifies" }
{ "type": "test", "name": "prop_different_keys_different_signatures", "event": "ignored" }
{ "type": "test", "name": "prop_digest_avalanche_effect", "event": "ignored" }
{ "type": "test", "name": "prop_digest_deterministic", "event": "ignored" }
{ "type": "test", "name": "prop_digest_format", "event": "ignored" }
{ "type": "test", "name": "prop_invalid_signature_fails", "event": "ignored" }
{ "type": "test", "name": "prop_seal_preserves_size", "event": "ignored" }
{ "type": "test", "name": "prop_seal_verify_roundtrip", "event": "ignored" }
{ "type": "test", "name": "prop_signature_deterministic", "event": "ignored" }
{ "type": "test", "name": "prop_signature_length", "event": "ignored" }
{ "type": "test", "name": "prop_tampered_shard_id_fails", "event": "ignored" }
{ "type": "test", "name": "prop_unique_shard_ids", "event": "ignored" }
{ "type": "test", "name": "prop_valid_signature_verifies", "event": "ignored" }
{ "type": "test", "event": "started", "name": "test_alternating_seal_verify" }
{ "type": "test", "event": "started", "name": "test_capacity_queries_under_load" }
{ "type": "test", "event": "started", "name": "test_digest_computation_stress" }
{ "type": "test", "event": "started", "name": "test_edge_case_all_ones_model" }
{ "type": "test", "event": "started", "name": "test_edge_case_all_zeros_model" }
{ "type": "test", "event": "started", "name": "test_edge_case_single_byte_model" }
{ "type": "test", "event": "started", "name": "test_large_model_seal" }
{ "type": "test", "event": "started", "name": "test_many_small_allocations" }
{ "type": "test", "event": "started", "name": "test_memory_leak_detection" }
{ "type": "test", "event": "started", "name": "test_rapid_seal_cycles" }
{ "type": "test", "event": "started", "name": "test_repeated_verification" }
{ "type": "test", "event": "started", "name": "test_seal_until_vram_exhausted" }
{ "type": "test", "name": "test_seal_until_vram_exhausted", "event": "ignored" }
{ "type": "test", "event": "started", "name": "test_seal_with_varying_sizes" }
{ "type": "test", "name": "test_digest_computation_stress", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_signature_computation_stress" }
{ "type": "test", "name": "test_signature_computation_stress", "event": "ok" }
{ "type": "test", "event": "started", "name": "test_verification_stress" }
{ "type": "test", "name": "test_verification_stress", "event": "ok" }
{ "type": "test", "name": "test_edge_case_single_byte_model", "event": "ok" }
{ "type": "test", "name": "test_edge_case_all_zeros_model", "event": "ok" }
{ "type": "test", "name": "test_edge_case_all_ones_model", "event": "ok" }
{ "type": "test", "name": "test_memory_leak_detection", "event": "ok" }
{ "type": "test", "name": "test_alternating_seal_verify", "event": "ok" }
{ "type": "test", "name": "test_rapid_seal_cycles", "event": "ok" }
{ "type": "test", "name": "test_repeated_verification", "event": "ok" }
{ "type": "test", "name": "test_seal_with_varying_sizes", "event": "ok" }
{ "type": "test", "name": "test_many_small_allocations", "event": "ok" }
{ "type": "test", "name": "test_capacity_queries_under_load", "event": "ok" }
{ "type": "test", "name": "test_large_model_seal", "event": "ok" }
{ "type": "test", "event": "started", "name": "ensure_cuda_warning_visibility" }
{ "type": "test", "event": "started", "name": "print_test_mode_info" }
{ "type": "test", "name": "print_test_mode_info", "event": "ok" }
{ "type": "test", "name": "ensure_cuda_warning_visibility", "event": "ok" }
{ "type": "test", "event": "started", "name": "bin/worker-orcd-crates/vram-residency/src/allocator/vram_manager.rs - allocator::vram_manager::VramManager (line 31)" }
{ "type": "test", "event": "started", "name": "bin/worker-orcd-crates/vram-residency/src/cuda_ffi/mod.rs - cuda_ffi (line 19)" }
{ "type": "test", "event": "started", "name": "bin/worker-orcd-crates/vram-residency/src/lib.rs - (line 100)" }
{ "type": "test", "event": "started", "name": "bin/worker-orcd-crates/vram-residency/src/lib.rs - (line 37)" }
{ "type": "test", "event": "started", "name": "bin/worker-orcd-crates/vram-residency/src/lib.rs - (line 78)" }
{ "type": "test", "event": "started", "name": "bin/worker-orcd-crates/vram-residency/src/seal/key_derivation.rs - seal::key_derivation::derive_seal_key (line 32)" }
{ "type": "test", "name": "bin/worker-orcd-crates/vram-residency/src/lib.rs - (line 37)", "event": "ignored" }
{ "type": "test", "name": "bin/worker-orcd-crates/vram-residency/src/lib.rs - (line 78)", "event": "ignored" }
{ "type": "test", "name": "bin/worker-orcd-crates/vram-residency/src/seal/key_derivation.rs - seal::key_derivation::derive_seal_key (line 32)", "event": "ok" }
{ "type": "test", "name": "bin/worker-orcd-crates/vram-residency/src/cuda_ffi/mod.rs - cuda_ffi (line 19)", "event": "failed", "stdout": "error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n --> bin/worker-orcd-crates/vram-residency/src/cuda_ffi/mod.rs:23:30\n  |\n4 | fn main() { #[allow(non_snake_case)] fn _doctest_main_bin_worker_orcd_crates_vram_residency_src_cuda_ffi_mod_rs_19_0() {\n  |                                      --------------------------------------------------------------------------------- this function should return `Result` or `Option` to accept `?`\n...\n7 | let ctx = CudaContext::new(0)?; // GPU device 0\n  |                              ^ cannot use the `?` operator in a function that returns `()`\n  |\nhelp: consider adding return type\n  |\n4 ~ fn main() { #[allow(non_snake_case)] fn _doctest_main_bin_worker_orcd_crates_vram_residency_src_cuda_ffi_mod_rs_19_0() -> Result<(), Box<dyn std::error::Error>> {\n5 | use vram_residency::cuda_ffi::{CudaContext, SafeCudaPtr};\n...\n9 | ptr.write_at(0, &[1, 2, 3, 4])?;\n10+     Ok(())\n  |\n\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n --> bin/worker-orcd-crates/vram-residency/src/cuda_ffi/mod.rs:24:38\n  |\n4 | fn main() { #[allow(non_snake_case)] fn _doctest_main_bin_worker_orcd_crates_vram_residency_src_cuda_ffi_mod_rs_19_0() {\n  |                                      --------------------------------------------------------------------------------- this function should return `Result` or `Option` to accept `?`\n...\n8 | let mut ptr = ctx.allocate_vram(1024)?;\n  |                                      ^ cannot use the `?` operator in a function that returns `()`\n  |\nhelp: consider adding return type\n  |\n4 ~ fn main() { #[allow(non_snake_case)] fn _doctest_main_bin_worker_orcd_crates_vram_residency_src_cuda_ffi_mod_rs_19_0() -> Result<(), Box<dyn std::error::Error>> {\n5 | use vram_residency::cuda_ffi::{CudaContext, SafeCudaPtr};\n...\n9 | ptr.write_at(0, &[1, 2, 3, 4])?;\n10+     Ok(())\n  |\n\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n --> bin/worker-orcd-crates/vram-residency/src/cuda_ffi/mod.rs:25:31\n  |\n4 | fn main() { #[allow(non_snake_case)] fn _doctest_main_bin_worker_orcd_crates_vram_residency_src_cuda_ffi_mod_rs_19_0() {\n  |                                      --------------------------------------------------------------------------------- this function should return `Result` or `Option` to accept `?`\n...\n9 | ptr.write_at(0, &[1, 2, 3, 4])?;\n  |                               ^ cannot use the `?` operator in a function that returns `()`\n  |\nhelp: consider adding return type\n  |\n4 ~ fn main() { #[allow(non_snake_case)] fn _doctest_main_bin_worker_orcd_crates_vram_residency_src_cuda_ffi_mod_rs_19_0() -> Result<(), Box<dyn std::error::Error>> {\n5 | use vram_residency::cuda_ffi::{CudaContext, SafeCudaPtr};\n...\n9 | ptr.write_at(0, &[1, 2, 3, 4])?;\n10+     Ok(())\n  |\n\nerror: aborting due to 3 previous errors\n\nFor more information about this error, try `rustc --explain E0277`.\nCouldn't compile the test." }
{ "type": "test", "name": "bin/worker-orcd-crates/vram-residency/src/allocator/vram_manager.rs - allocator::vram_manager::VramManager (line 31)", "event": "failed", "stdout": "error[E0061]: this function takes 4 arguments but 2 arguments were supplied\n  --> bin/worker-orcd-crates/vram-residency/src/allocator/vram_manager.rs:35:19\n   |\n 7 | let mut manager = VramManager::new_with_token(\"worker-token\", 0)?;\n   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^------------------- two arguments of type `Option<Arc<audit_logging::logger::AuditLogger>>` and `String` are missing\n   |\nnote: associated function defined here\n  --> /home/vince/Projects/llama-orch/bin/worker-orcd-crates/vram-residency/src/allocator/vram_manager.rs:91:12\n   |\n91 |     pub fn new_with_token(\n   |            ^^^^^^^^^^^^^^\nhelp: provide the arguments\n   |\n 7 | let mut manager = VramManager::new_with_token(\"worker-token\", 0, /* Option<Arc<audit_logging::logger::AuditLogger>> */, /* String */)?;\n   |                                                                +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nerror: aborting due to 1 previous error\n\nFor more information about this error, try `rustc --explain E0061`.\nCouldn't compile the test." }
{ "type": "test", "name": "bin/worker-orcd-crates/vram-residency/src/lib.rs - (line 100)", "event": "failed", "stdout": "error[E0425]: cannot find value `model_bytes` in this scope\n  --> bin/worker-orcd-crates/vram-residency/src/lib.rs:107:32\n   |\n10 | let shard = manager.seal_model(model_bytes, gpu_device)?;\n   |                                ^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `gpu_device` in this scope\n  --> bin/worker-orcd-crates/vram-residency/src/lib.rs:107:45\n   |\n10 | let shard = manager.seal_model(model_bytes, gpu_device)?;\n   |                                             ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `prompt` in this scope\n  --> bin/worker-orcd-crates/vram-residency/src/lib.rs:113:25\n   |\n16 | manager.execute(&shard, prompt)?;\n   |                         ^^^^^^ not found in this scope\n\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n  --> bin/worker-orcd-crates/vram-residency/src/lib.rs:107:56\n   |\n 4 | fn main() { #[allow(non_snake_case)] fn _doctest_main_bin_worker_orcd_crates_vram_residency_src_lib_rs_100_0() {\n   |                                      ------------------------------------------------------------------------- this function should return `Result` or `Option` to accept `?`\n...\n10 | let shard = manager.seal_model(model_bytes, gpu_device)?;\n   |                                                        ^ cannot use the `?` operator in a function that returns `()`\n   |\nhelp: consider adding return type\n   |\n 4 ~ fn main() { #[allow(non_snake_case)] fn _doctest_main_bin_worker_orcd_crates_vram_residency_src_lib_rs_100_0() -> Result<(), Box<dyn std::error::Error>> {\n 5 | use vram_residency::{VramManager, SealedShard};\n...\n16 | manager.execute(&shard, prompt)?;\n17 +     Ok(())\n   |\n\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\n  --> bin/worker-orcd-crates/vram-residency/src/lib.rs:110:30\n   |\n 4 | fn main() { #[allow(non_snake_case)] fn _doctest_main_bin_worker_orcd_crates_vram_residency_src_lib_rs_100_0() {\n   |                                      ------------------------------------------------------------------------- this function should return `Result` or `Option` to accept `?`\n...\n13 | manager.verify_sealed(&shard)?;\n   |                              ^ cannot use the `?` operator in a function that returns `()`\n   |\nhelp: consider adding return type\n   |\n 4 ~ fn main() { #[allow(non_snake_case)] fn _doctest_main_bin_worker_orcd_crates_vram_residency_src_lib_rs_100_0() -> Result<(), Box<dyn std::error::Error>> {\n 5 | use vram_residency::{VramManager, SealedShard};\n...\n16 | manager.execute(&shard, prompt)?;\n17 +     Ok(())\n   |\n\nerror[E0599]: no method named `execute` found for struct `VramManager` in the current scope\n  --> bin/worker-orcd-crates/vram-residency/src/lib.rs:113:9\n   |\n16 | manager.execute(&shard, prompt)?;\n   |         ^^^^^^^ method not found in `VramManager`\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0425, E0599.\nFor more information about an error, try `rustc --explain E0277`.\nCouldn't compile the test." }
