//! Integration tests for capabilities cache
//!
//! Created by: TEAM-196
//!
//! Tests the complete capabilities workflow:
//! - Save and load capabilities
//! - Update and remove hives
//! - Device type classification
//! - Endpoint tracking

use rbee_config::{CapabilitiesCache, DeviceInfo, DeviceType, HiveCapabilities};
use std::path::PathBuf;
use tempfile::NamedTempFile;

#[test]
fn test_capabilities_save_and_load() {
    // TEAM-196: Test complete save/load cycle
    let file = NamedTempFile::new().unwrap();
    let mut cache = CapabilitiesCache::new(file.path().to_path_buf());

    let caps = HiveCapabilities::new(
        "test-hive".to_string(),
        vec![
            DeviceInfo {
                id: "GPU-0".to_string(),
                name: "NVIDIA RTX 4090".to_string(),
                vram_gb: 24,
                compute_capability: Some("8.9".to_string()),
                device_type: DeviceType::Gpu,
            },
            DeviceInfo {
                id: "CPU-0".to_string(),
                name: "AMD Ryzen 9 7950X".to_string(),
                vram_gb: 0,
                compute_capability: None,
                device_type: DeviceType::Cpu,
            },
        ],
        "http://localhost:8081".to_string(),
    );

    cache.update_hive("test-hive", caps);

    // Save
    cache.save().unwrap();

    // Load
    let loaded = CapabilitiesCache::load(file.path()).unwrap();

    assert_eq!(loaded.len(), 1);
    assert!(loaded.contains("test-hive"));

    let hive_caps = loaded.get("test-hive").unwrap();
    assert_eq!(hive_caps.alias, "test-hive");
    assert_eq!(hive_caps.devices.len(), 2);
    assert_eq!(hive_caps.endpoint, "http://localhost:8081");

    // Check GPU device
    let gpu = &hive_caps.devices[0];
    assert_eq!(gpu.id, "GPU-0");
    assert_eq!(gpu.name, "NVIDIA RTX 4090");
    assert_eq!(gpu.vram_gb, 24);
    assert_eq!(gpu.compute_capability, Some("8.9".to_string()));
    assert!(matches!(gpu.device_type, DeviceType::Gpu));

    // Check CPU device
    let cpu = &hive_caps.devices[1];
    assert_eq!(cpu.id, "CPU-0");
    assert_eq!(cpu.name, "AMD Ryzen 9 7950X");
    assert_eq!(cpu.vram_gb, 0);
    assert_eq!(cpu.compute_capability, None);
    assert!(matches!(cpu.device_type, DeviceType::Cpu));
}

#[test]
fn test_capabilities_remove_hive() {
    // TEAM-196: Test hive removal from cache
    let file = NamedTempFile::new().unwrap();
    let mut cache = CapabilitiesCache::new(file.path().to_path_buf());

    // Add hive
    let caps =
        HiveCapabilities::new("test-hive".to_string(), vec![], "http://localhost:8081".to_string());
    cache.update_hive("test-hive", caps);
    assert_eq!(cache.len(), 1);

    // Remove hive
    let removed = cache.remove("test-hive");
    assert!(removed.is_some());
    assert_eq!(cache.len(), 0);
    assert!(!cache.contains("test-hive"));
}

#[test]
fn test_hive_capabilities_gpu_helpers() {
    // TEAM-196: Test GPU detection and counting
    let caps = HiveCapabilities::new(
        "test".to_string(),
        vec![
            DeviceInfo {
                id: "GPU-0".to_string(),
                name: "RTX 4090".to_string(),
                vram_gb: 24,
                compute_capability: Some("8.9".to_string()),
                device_type: DeviceType::Gpu,
            },
            DeviceInfo {
                id: "GPU-1".to_string(),
                name: "RTX 3060".to_string(),
                vram_gb: 12,
                compute_capability: Some("8.6".to_string()),
                device_type: DeviceType::Gpu,
            },
            DeviceInfo {
                id: "CPU-0".to_string(),
                name: "Intel i9".to_string(),
                vram_gb: 0,
                compute_capability: None,
                device_type: DeviceType::Cpu,
            },
        ],
        "http://localhost:8081".to_string(),
    );

    assert!(caps.has_gpu());
    assert_eq!(caps.gpu_count(), 2);
    assert_eq!(caps.total_vram_gb(), 36); // 24 + 12
}

#[test]
fn test_capabilities_yaml_format() {
    // TEAM-196: Test YAML output format
    let file = NamedTempFile::new().unwrap();
    let mut cache = CapabilitiesCache::new(file.path().to_path_buf());

    let caps = HiveCapabilities::new(
        "localhost".to_string(),
        vec![DeviceInfo {
            id: "GPU-0".to_string(),
            name: "RTX 4090".to_string(),
            vram_gb: 24,
            compute_capability: Some("8.9".to_string()),
            device_type: DeviceType::Gpu,
        }],
        "http://localhost:8081".to_string(),
    );

    cache.update_hive("localhost", caps);
    cache.save().unwrap();

    let content = std::fs::read_to_string(file.path()).unwrap();

    // Check header
    assert!(content.contains("# Auto-generated by queen-rbee"));
    assert!(content.contains("# DO NOT EDIT MANUALLY"));

    // Check content
    assert!(content.contains("localhost:"));
    assert!(content.contains("RTX 4090"));
    assert!(content.contains("endpoint:"));
    assert!(content.contains("http://localhost:8081"));
    assert!(content.contains("device_type: gpu"));
}

#[test]
fn test_capabilities_multiple_hives() {
    // TEAM-196: Test multiple hives in cache
    let file = NamedTempFile::new().unwrap();
    let mut cache = CapabilitiesCache::new(file.path().to_path_buf());

    // Add first hive
    let caps1 = HiveCapabilities::new(
        "hive-1".to_string(),
        vec![DeviceInfo {
            id: "GPU-0".to_string(),
            name: "RTX 4090".to_string(),
            vram_gb: 24,
            compute_capability: Some("8.9".to_string()),
            device_type: DeviceType::Gpu,
        }],
        "http://localhost:8081".to_string(),
    );
    cache.update_hive("hive-1", caps1);

    // Add second hive
    let caps2 = HiveCapabilities::new(
        "hive-2".to_string(),
        vec![DeviceInfo {
            id: "CPU-0".to_string(),
            name: "AMD Ryzen".to_string(),
            vram_gb: 0,
            compute_capability: None,
            device_type: DeviceType::Cpu,
        }],
        "http://192.168.1.100:8081".to_string(),
    );
    cache.update_hive("hive-2", caps2);

    assert_eq!(cache.len(), 2);
    assert!(cache.contains("hive-1"));
    assert!(cache.contains("hive-2"));

    // Save and reload
    cache.save().unwrap();
    let loaded = CapabilitiesCache::load(file.path()).unwrap();

    assert_eq!(loaded.len(), 2);

    let hive1 = loaded.get("hive-1").unwrap();
    assert_eq!(hive1.endpoint, "http://localhost:8081");
    assert_eq!(hive1.gpu_count(), 1);

    let hive2 = loaded.get("hive-2").unwrap();
    assert_eq!(hive2.endpoint, "http://192.168.1.100:8081");
    assert_eq!(hive2.gpu_count(), 0);
}
