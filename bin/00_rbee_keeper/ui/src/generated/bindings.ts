
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
/**
 * Test narration event emission
 * TEAM-336: Debug command to verify narration pipeline works
 */
async testNarration() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("test_narration") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async sshList() : Promise<Result<SshTarget[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("ssh_list") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Open SSH config file in default text editor
 * TEAM-338: Opens ~/.ssh/config with system default editor
 */
async sshOpenConfig() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("ssh_open_config") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Start queen-rbee daemon on localhost
 * TEAM-335: Thin wrapper around handle_queen() - business logic in handlers/queen.rs
 */
async queenStart() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("queen_start") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Stop queen-rbee daemon
 * TEAM-335: Thin wrapper around handle_queen()
 */
async queenStop() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("queen_stop") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Install queen-rbee binary
 * TEAM-335: Thin wrapper around handle_queen()
 */
async queenInstall(binary: string | null) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("queen_install", { binary }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Rebuild queen-rbee from source
 * TEAM-335: Thin wrapper around handle_queen()
 */
async queenRebuild(withLocalHive: boolean) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("queen_rebuild", { withLocalHive }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Uninstall queen-rbee binary
 * TEAM-335: Thin wrapper around handle_queen()
 */
async queenUninstall() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("queen_uninstall") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Start rbee-hive daemon
 * TEAM-338: Thin wrapper around handle_hive()
 */
async hiveStart(alias: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("hive_start", { alias }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Stop rbee-hive daemon
 * TEAM-338: Thin wrapper around handle_hive()
 */
async hiveStop(alias: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("hive_stop", { alias }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Check rbee-hive status
 * TEAM-338: Thin wrapper around handle_hive()
 */
async hiveStatus(alias: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("hive_status", { alias }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Install rbee-hive binary
 * TEAM-338: Thin wrapper around handle_hive()
 */
async hiveInstall(alias: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("hive_install", { alias }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Uninstall rbee-hive binary
 * TEAM-338: Thin wrapper around handle_hive()
 */
async hiveUninstall(alias: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("hive_uninstall", { alias }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Rebuild rbee-hive from source
 * TEAM-338: Thin wrapper around handle_hive()
 */
async hiveRebuild(alias: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("hive_rebuild", { alias }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
/**
 * Refresh device capabilities for a hive
 * TEAM-338: Thin wrapper around handle_hive()
 */
async hiveRefreshCapabilities(alias: string) : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("hive_refresh_capabilities", { alias }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

/**
 * Narration event payload for Tauri frontend
 */
export type NarrationEvent = { level: string; message: string; timestamp: string }
/**
 * SSH target from ~/.ssh/config
 * 
 * TEAM-333: Type for SSH config entries with specta support for TypeScript bindings
 */
export type SshTarget = { 
/**
 * Host alias from SSH config
 */
host: string; 
/**
 * Host subtitle (optional)
 */
host_subtitle: string | null; 
/**
 * Hostname (IP or domain)
 */
hostname: string; 
/**
 * SSH username
 */
user: string; 
/**
 * SSH port
 */
port: number; 
/**
 * Connection status
 */
status: SshTargetStatus }
/**
 * SSH target connection status
 * 
 * TEAM-333: Status enum for SSH targets
 */
export type SshTargetStatus = "online" | "offline" | "unknown"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
