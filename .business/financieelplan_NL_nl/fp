#!/usr/bin/env python3
"""
Financieel Plan (NL) — dunne CLI (Phase 2)

Gebruik (fish):
  cd /home/vince/Projects/llama-orch/.business/financieelplan_NL_nl
  chmod +x fp
  ./fp scan --roots ../ondernemersplan_NL_nl/.002-draft ../.specs ../frontend ../consumers --out ./out
  ./fp run ./examples/voorbeeld.yml --out ./out --months 12 --scenario base --vat-period monthly

Eigenschappen:
- Pure stdlib + decimal (context in core/money.py)
- `scan` is dev-only; `run` leest nooit scans/.002-draft
"""
from __future__ import annotations

import argparse
import sys
from pathlib import Path
from typing import Optional, List

from core.io_ import load_input, write_reports
from core.engine import compute_model
from core.scan import scan_roots
from core.money import money as fmt_money, D


def cmd_scan(args: argparse.Namespace) -> None:
    roots = [Path(p).resolve() for p in args.roots]
    out_dir = Path(args.out).resolve()
    (out_dir / 'meta').mkdir(parents=True, exist_ok=True)
    scan_roots(roots, out_dir / 'meta')
    print(f"Context index written to {out_dir / 'meta' / 'context_index.json'}")


def cmd_run(args: argparse.Namespace) -> None:
    in_path = Path(args.input).resolve()
    out_dir = Path(args.out).resolve()
    out_dir.mkdir(parents=True, exist_ok=True)

    cfg = load_input(in_path)
    months = int(args.months)
    if months <= 0:
        raise SystemExit('--months moet > 0 zijn')
    scenario = args.scenario
    vat_period = args.vat_period

    model = compute_model(cfg, months, scenario, vat_period)
    write_reports(out_dir, model)

    # één-scherm samenvatting
    cov = model['coverage']
    cov_str = str((cov.quantize(D('0.01')) if hasattr(cov, 'quantize') else D(str(cov)).quantize(D('0.01')))) + 'x'
    print('=== Samenvatting ===')
    print(f"Laagste kasstand: {fmt_money(model['lowest_cash'])} (maand {model['lowest_cash_month']})")
    print(f"Gem. EBITDA: {fmt_money(model['avg_ebitda'])}")
    print(f"Gem. schuldendienst: {fmt_money(model['avg_debt_service'])}")
    print(f"Maandlast-dekking: {cov_str}")
    print(f"Scenario: {scenario}, BTW-periode: {vat_period}")


def build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(description='Financieel Plan Generator (NL)')
    sub = p.add_subparsers(dest='cmd', required=True)

    p_scan = sub.add_parser('scan', help='Scan repository text roots (dev-only)')
    p_scan.add_argument('--roots', nargs='+', required=True, help='One or more roots to scan')
    p_scan.add_argument('--out', required=True, help='Output directory (e.g., ./out)')
    p_scan.set_defaults(func=cmd_scan)

    p_run = sub.add_parser('run', help='Run financial model and emit reports')
    p_run.add_argument('input', help='Input file .yml|.yaml|.json')
    p_run.add_argument('--out', required=True, help='Output directory')
    p_run.add_argument('--months', type=int, default=12, help='Number of months')
    p_run.add_argument('--scenario', choices=['base', 'best', 'worst'], default='base')
    p_run.add_argument('--vat-period', choices=['monthly', 'quarterly'], default='monthly')
    p_run.set_defaults(func=cmd_run)

    return p


def main(argv: Optional[List[str]] = None) -> None:
    parser = build_parser()
    args = parser.parse_args(argv)
    try:
        args.func(args)
    except Exception as e:
        print(f"Fout: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()
