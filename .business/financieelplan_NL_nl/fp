#!/usr/bin/env python3
"""
Financieel Plan (NL) — dunne CLI (Phase 2)

Gebruik (fish):
  cd /home/vince/Projects/llama-orch/.business/financieelplan_NL_nl
  chmod +x fp
  ./fp scan --roots ../ondernemersplan_NL_nl/.002-draft ../.specs ../frontend ../consumers --out ./out
  ./fp run ./examples/voorbeeld.yml --out ./out --months 12 --scenario base --vat-period monthly

Eigenschappen:
- Pure stdlib + decimal (context in core/money.py)
- `scan` is dev-only; `run` leest nooit scans/.002-draft
"""
from __future__ import annotations

import argparse
import sys
from pathlib import Path
from typing import Optional, List

from core.io_ import load_input, write_reports
from core.engine import compute_model
from core.scan import scan_roots
from core.money import money as fmt_money, D
from core.schema import validate_and_default
from core.mapping import build_template_context
from core.renderer import parse_whitelist, render_template, check_templates, generate_template_keys_md, RenderError


def cmd_scan(args: argparse.Namespace) -> None:
    roots = [Path(p).resolve() for p in args.roots]
    out_dir = Path(args.out).resolve()
    (out_dir / 'meta').mkdir(parents=True, exist_ok=True)
    scan_roots(roots, out_dir / 'meta')
    print(f"Context index written to {out_dir / 'meta' / 'context_index.json'}")


def cmd_run(args: argparse.Namespace) -> None:
    in_path = Path(args.input).resolve()
    out_dir = Path(args.out).resolve()
    out_dir.mkdir(parents=True, exist_ok=True)

    cfg_raw = load_input(in_path)
    cfg_norm, months_list = validate_and_default(cfg_raw, int(args.months))
    months = len(months_list)
    if months <= 0:
        raise SystemExit('--months moet > 0 zijn')
    scenario = args.scenario
    vat_period = args.vat_period

    model = compute_model(cfg_norm, months, scenario, vat_period)
    write_reports(out_dir, model)

    # Render templates with whitelist
    templates_dir = Path(__file__).resolve().parent / 'templates'
    placeholders_md = templates_dir / 'placeholders' / 'placeholders.md'
    whitelist, _desc = parse_whitelist(placeholders_md)
    context = build_template_context(model)
    for tpl in sorted(templates_dir.glob('*.md.tpl')):
        tpl_text = tpl.read_text(encoding='utf-8')
        try:
            rendered = render_template(tpl_text, context, whitelist)
        except RenderError as e:
            print(f"Template render error in {tpl.name}: {e}", file=sys.stderr)
            raise SystemExit(1)
        out_path = out_dir / tpl.name.replace('.md.tpl', '.md')
        out_path.write_text(rendered, encoding='utf-8')

    # één-scherm samenvatting
    cov = model['coverage']
    cov_str = str((cov.quantize(D('0.01')) if hasattr(cov, 'quantize') else D(str(cov)).quantize(D('0.01')))) + 'x'
    print('=== Samenvatting ===')
    print(f"Laagste kasstand: {fmt_money(model['lowest_cash'])} (maand {model['lowest_cash_month']})")
    print(f"Gem. EBITDA: {fmt_money(model['avg_ebitda'])}")
    print(f"Gem. schuldendienst: {fmt_money(model['avg_debt_service'])}")
    print(f"Maandlast-dekking: {cov_str}")
    print(f"Scenario: {scenario}, BTW-periode: {vat_period}")


def cmd_list_keys(args: argparse.Namespace) -> None:
    templates_dir = Path(__file__).resolve().parent / 'templates'
    placeholders_md = templates_dir / 'placeholders' / 'placeholders.md'
    whitelist, _ = parse_whitelist(placeholders_md)
    for k in sorted(whitelist):
        print(k)


def cmd_check_templates(args: argparse.Namespace) -> None:
    templates_dir = Path(__file__).resolve().parent / 'templates'
    placeholders_md = templates_dir / 'placeholders' / 'placeholders.md'
    whitelist, _ = parse_whitelist(placeholders_md)
    issues = check_templates(templates_dir, whitelist)
    # Always regenerate TEMPLATE_KEYS.md for devs
    generate_template_keys_md(templates_dir, placeholders_md, templates_dir / 'TEMPLATE_KEYS.md')
    if issues:
        print('Unknown placeholders found in templates:')
        for path, unknown in issues:
            rel = Path(path).relative_to(templates_dir)
            print(f"- {rel}: {', '.join(unknown)}")
        raise SystemExit(1)
    print('Templates OK: all placeholders are whitelisted.')


def cmd_validate(args: argparse.Namespace) -> None:
    in_path = Path(args.input).resolve()
    cfg_raw = load_input(in_path)
    cfg_norm, months_list = validate_and_default(cfg_raw, int(args.months) if args.months else 0)
    print('Validation OK:')
    print(f"- start_maand: {cfg_norm.get('bedrijf', {}).get('start_maand')}")
    print(f"- horizon_maanden: {len(months_list)}")
    print(f"- streams: {len(cfg_norm.get('omzetstromen', []) or [])}")


def build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(description='Financieel Plan Generator (NL)')
    sub = p.add_subparsers(dest='cmd', required=True)

    p_scan = sub.add_parser('scan', help='Scan repository text roots (dev-only)')
    p_scan.add_argument('--roots', nargs='+', required=True, help='One or more roots to scan')
    p_scan.add_argument('--out', required=True, help='Output directory (e.g., ./out)')
    p_scan.set_defaults(func=cmd_scan)

    p_run = sub.add_parser('run', help='Run financial model and emit reports')
    p_run.add_argument('input', help='Input file .yml|.yaml|.json')
    p_run.add_argument('--out', required=True, help='Output directory')
    p_run.add_argument('--months', type=int, default=12, help='Number of months')
    p_run.add_argument('--scenario', choices=['base', 'best', 'worst'], default='base')
    p_run.add_argument('--vat-period', choices=['monthly', 'quarterly'], default='monthly')
    p_run.set_defaults(func=cmd_run)

    p_keys = sub.add_parser('list-keys', help='List all whitelisted template placeholders')
    p_keys.set_defaults(func=cmd_list_keys)

    p_chk = sub.add_parser('check-templates', help='Check templates against whitelist and generate TEMPLATE_KEYS.md')
    p_chk.set_defaults(func=cmd_check_templates)

    p_val = sub.add_parser('validate', help='Validate input schema and print applied defaults')
    p_val.add_argument('input', help='Input file .yml|.yaml|.json')
    p_val.add_argument('--months', type=int, default=0, help='Optional override for horizon')
    p_val.set_defaults(func=cmd_validate)

    return p


def main(argv: Optional[List[str]] = None) -> None:
    parser = build_parser()
    args = parser.parse_args(argv)
    try:
        args.func(args)
    except Exception as e:
        print(f"Fout: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()
